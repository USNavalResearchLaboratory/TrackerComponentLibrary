function val=boundsIntersectBall(point,rSquared,rectMin,rectMax)%BOUNDSINTERSECTBALL Determines whether a (hyper)sphere of a given squared%                    radius centered at the given point intersects a%                    hyperrectangular region. This also returns true if a%                    circle is entirely within the rectangle without%                    intersecting the edges.%%INPUTS: point A kX1 dimensional point.%     rSquared A scalar squared distance about the point that describes%              the spherical region that will be tested for intersection%              with the hyperrectangle.%      rectMin A kX1 vector of the lower bounds of each of the dimensions%              of the k-dimensional hyperrectangle.%      rectMax A kX1 vector of the upper bounds of the hyperectangle.%%OUTPUTS: val A boolean value that is true if the ball intersects the%             hyperrectangular region and false otherwise.%%The algorithm is from the "BOUNDS OVERLAP BALL" procedure in [1].%%EXAMPLE:%This draws a grid of circles in 2D and a rectangle. The circles are%colored according to whether they intersect the rectangle.%Parameters for all of the circles.% A=eye(2,2);%For a sphere.% r2=1/4;%Squared radius.% x=1:10;% [X,Y]=meshgrid(x,x);% xy=[X(:).';Y(:).'];% %Parameters for the rectangle.% rectMin=[3;4];% rectMax=[8,9];% % figure(1)% clf% hold on% %Draw all of the circles.% for k=1:size(xy,2)%     if(boundsIntersectBall(xy(:,k),r2,rectMin,rectMax))%         drawEllipse(xy(:,k),A,r2,'-r','linewidth',2)%     else%         drawEllipse(xy(:,k),A,r2,'-k','linewidth',2)%     end% end% %Draw the rectangle.% pts=[rectMin(1),rectMin(1),rectMax(1),rectMax(1),rectMin(1);%      rectMin(2),rectMax(2),rectMax(2),rectMin(2),rectMin(2)];% plot(pts(1,:),pts(2,:),'-b','linewidth',4)%%REFERENCES:%[1] J. H. Friedman, J. L. Bentley, and R. A. Finkel, "An algorithm for%    finding best matches in logarithmic expected time," ACM Transactions%    on Mathematical Software, vol. 3, no. 3, pp. 209-226, Sep. 1977.%%December 2013 David F. Crouse, Naval Research Laboratory, Washington D.C.%(UNCLASSIFIED) DISTRIBUTION STATEMENT A. Approved for public release.numDim=length(point);cumDist=0;for curDim=1:numDim    if(point(curDim)<rectMin(curDim))        cumDist=cumDist+(point(curDim)-rectMin(curDim))^2;    elseif(point(curDim)>rectMax(curDim))        cumDist=cumDist+(point(curDim)-rectMax(curDim))^2;    end    if(cumDist>rSquared)        val=false;        return    endendval=true;end%LICENSE:%%The source code is in the public domain and not licensed or under%copyright. The information and software may be used freely by the public.%As required by 17 U.S.C. 403, third parties producing copyrighted works%consisting predominantly of the material produced by U.S. government%agencies must provide notice with such work(s) identifying the U.S.%Government material incorporated and stating that such material is not%subject to copyright protection.%%Derived works shall not identify themselves in a manner that implies an%endorsement by or an affiliation with the Naval Research Laboratory.%%RECIPIENT BEARS ALL RISK RELATING TO QUALITY AND PERFORMANCE OF THE%SOFTWARE AND ANY RELATED MATERIALS, AND AGREES TO INDEMNIFY THE NAVAL%RESEARCH LABORATORY FOR ALL THIRD-PARTY CLAIMS RESULTING FROM THE ACTIONS%OF RECIPIENT IN THE USE OF THE SOFTWARE.